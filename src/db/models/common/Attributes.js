import _ from "lodash";
import { Collection, Ref, SoftRef } from "./Types";

export const unique = true;
export const encrypted = true;
export const required = true;

export const DEFAULT = 0;
export const ON_CREATE = 1;
export const ON_UPDATE = 2;
export const autoGenerated = [DEFAULT];

export const TYPES = {
  //   JavaScript Types || DynamoDB Types
  ARRAY: { name: "Array", dbType: "L" }, //List
  BOOLEAN: { name: "Boolean", dbType: "BOOL" },
  BINARY: { name: "Binary", dbType: "B" },
  DATE: { name: "Date", dbNdbTypeame: "N" },
  FUNCTION: { name: "Function", dbType: "NULL" }, //Functions can't Be stored
  JSON: { name: "Object", dbType: "M" },
  NUMBER: { name: "Number", dbType: "N" },
  REGEXP: { name: "RegExp", dbType: "S" },
  STRING: { name: "String", dbType: "S" },
  SET: { name: "Set", dbType: "SS" },
  //Association Groupings
  REF: new Ref(null, false),
  SOFT_REF: new SoftRef(null, false),
  COLLECTION: new Collection(),
};
export const CONNECTION_LIST = [
  TYPES.REF.constructor.name,
  TYPES.SOFT_REF.constructor.name,
  TYPES.COLLECTION.constructor.name,
];

export const createRef = (foriegnModel, other) => {
  return { type: new Ref(foriegnModel), ...other };
};

export const createSoftRef = (foriegnModel, other) => {
  return { type: new SoftRef(foriegnModel), ...other };
};

export const createCollection = (foriegnModel, other) => {
  return { type: new Collection(foriegnModel), ...other };
};

/**
 *
 */
export const typeGn = (type = TYPES.STRING, autoGenerated = [DEFAULT]) => {
  return { type, autoGenerated };
};

/**
 * Props
 */
export const createdDate = typeGn(TYPES.DATE, [ON_CREATE]);
export const updatedDate = typeGn(TYPES.DATE, [ON_UPDATE, ON_CREATE]);
export const id = { ...typeGn(TYPES.STRING, [ON_CREATE]), required, unique };

export default { createdDate, updatedDate, id };
